from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from aiogram.dispatcher.filters import Text

from create_bot import bot, CHAT

from Keyboards.keybord import choise_faq, back_main, no_add,in_date_cl,choise_2


class FSMfag(StatesGroup):
    title = State()
    date = State()
    persons = State()
    time = State()
    finish = State()


async def get_admin(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ FAQ"""
    await callback.answer(cache_time=3)
    await callback.message.edit_text(text='–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –≤–æ–ø—Ä–æ—Å–æ–≤, –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å\n'
                                          '–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é /start',
                                     reply_markup=choise_faq)


async def question(callback: types.CallbackQuery):
    """–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ (–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å)"""
    await callback.answer(cache_time=3)
    await callback.message.edit_text(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —Å–µ–π—á–∞—Å —Å –≤–∞–º–∏ —Å–≤—è–∂–∏—Ç—Å—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞",
                                     reply_markup=InlineKeyboardMarkup().add(back_main))
    await bot.send_message(
        chat_id=CHAT,
        text=f'–ö–ª–∏–µ–Ω—Ç {callback.from_user.first_name},'
             f' —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n',
        reply_markup=InlineKeyboardMarkup(
            resize_keyboard=True,
            one_time_keyboard=True).add(
            InlineKeyboardButton('‚ùó –°–≤—è–∑–∞—Ç—å—Å—è',
                                 url=f'https://t.me/{callback.from_user.username}')))


# –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ (–æ—Ç—Å–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤)-> –ó–∞–ø—É—Å–∫ FSM –¥–ª—è –æ—Ç–∑—ã–≤–∞
async def feedback(callback: types.CallbackQuery):
    """–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ (–æ—Ç—Å–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤)-> –ó–∞–ø—É—Å–∫ FSM –¥–ª—è –æ—Ç–∑—ã–≤–∞"""
    await FSMfag.title.set()
    await callback.answer(cache_time=3)
    await callback.message.edit_text(text="–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –æ—Ç–∑—ã–≤", reply_markup=no_add)


async def feedback_finish(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î"""
    async with state.proxy() as data:
        data['tg_user_id'] = message.from_user.id
        data['user_name'] = message.from_user.username
        data['description'] = message.text
    await bot.send_message(
        chat_id=CHAT,
        text=f'–ö–ª–∏–µ–Ω—Ç {message.from_user.first_name} –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤\n'
             f'{message.text}',
        reply_markup=InlineKeyboardMarkup(
            row_width=2).add(
            InlineKeyboardButton('‚ùó –°–≤—è–∑–∞—Ç—å—Å—è',
                                 url=f'https://t.me/{message.from_user.username}'
                                 )))

    await state.finish()
    await bot.send_message(message.from_user.id,
                           '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –æ—Ç–∑—ã–≤, —è –µ–≥–æ —É–∂–µ –ø–µ—Ä–µ–¥–∞–ª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º',
                           reply_markup=InlineKeyboardMarkup().add(back_main))


# async def get_table_new(callback: types.CallbackQuery):
#     await callback.answer(cache_time=3)
#     await callback.message.edit_text(text="–ß—Ç–æ–±—ã –∑–∞–±—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º,–Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É",
#                                      reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('‚ùó –°–≤—è–∑–∞—Ç—å—Å—è',
#                                                                                                   url=f'https://t.me/Loft_ryb'
#                                                                                                   )).add(back_main))


# –†–∞–∑–¥–µ–ª –∑–∞–∫–∞–∑–∞ —Å—Ç–æ–ª–∏–∫–∞
async def get_table_start(callback: types.CallbackQuery):
    """–í—ã–±–æ—Ä –¥–∞—Ç—ã"""
    await callback.answer(cache_time=3)
    await callback.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–¥–∞ –Ω–∞—Å —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å:", reply_markup=in_date_cl)


async def another_date(callback: types.CallbackQuery):
    """–•–µ–Ω–¥–ª–µ—Ä –∑–∞–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –¥–∞—Ç—ã """
    await callback.answer(cache_time=3)
    await FSMfag.date.set()
    await callback.message.edit_text(text="–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì", reply_markup=no_add)


async def get_date(message: types.Message, state: FSMContext):
    """–õ–æ–≤–∏–º –¥–∞—Ç—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await FSMfag.date.set()
    try:
        datetime.strptime(message.text, "%d.%m.%Y")
        async with state.proxy() as data:
            data['date'] = message.text
        await FSMfag.next()
        await bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç —á–µ–ª–æ–≤–µ–∫',
                               reply_markup=no_add)
    except ValueError:
        await bot.send_message(message.from_user.id,
                               'ü§î –ü–æ-–º–æ–µ–º—É —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ, —É–∫–∞–∂–∏—Ç–µ —Å–Ω–æ–≤–∞', reply_markup=no_add)


async def get_date_cb(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å–µ–≥–æ–¥–Ω—è"""
    await FSMfag.date.set()
    async with state.proxy() as data:
        data['date'] = '—Å–µ–≥–æ–¥–Ω—è'
    await callback.answer(cache_time=3)
    await FSMfag.next()
    await callback.message.edit_text(text='–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç —á–µ–ª–æ–≤–µ–∫', reply_markup=no_add)


async def table_per(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        async with state.proxy() as data:
            data['persons'] = message.text
        await FSMfag.next()
        await bot.send_message(message.from_user.id,
                               '‚è∞–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú',
                               reply_markup=no_add)

    else:
        await bot.send_message(message.from_user.id,
                               'ü§î –ü–æ-–º–æ–µ–º—É —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ, —É–∫–∞–∂–∏—Ç–µ —Å–Ω–æ–≤–∞',
                               reply_markup=no_add)


async def get_time(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.text[2] == ':':
        if message.text.replace(":", "").isdigit():
            async with state.proxy() as data:
                data['time'] = message.text
            await FSMfag.next()
            await bot.send_message(message.from_user.id,
                                   "–ñ–º–∏ üëå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å \n"
                                   "–∏–ª–∏ ‚õî –û—Ç–º–µ–Ω–∞, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                                   reply_markup=choise_2)
        else:
            await bot.send_message(message.from_user.id,
                                   'ü§î –ü–æ-–º–æ–µ–º—É —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ, —É–∫–∞–∂–∏—Ç–µ —Å–Ω–æ–≤–∞',
                                   reply_markup=no_add)
    else:
        await bot.send_message(message.from_user.id,
                               'ü§î –ü–æ-–º–æ–µ–º—É —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ, —É–∫–∞–∂–∏—Ç–µ —Å–Ω–æ–≤–∞',
                               reply_markup=no_add)


async def table_finish(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–∫–∞–∑"""
    if callback.data == "Yes":
        async with state.proxy() as data:
            data['name'] = callback.from_user.first_name
            data['user'] = callback.from_user.id

        await bot.send_message(
            chat_id=CHAT,
            text=f"–ö–ª–∏–µ–Ω—Ç {data['name']} –∑–∞–∫–∞–∑–∞–ª —Å—Ç–æ–ª–∏–∫ –Ω–∞ "
                 f"{data['persons']} —á–µ–ª–æ–≤–µ–∫\n"
                 f"–Ω–∞ {data['date']} –∫ {data['time']}\n"
                 f"–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–≤—è–∑–∏: @{callback.from_user.username}",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton(
                    '‚ùó –°–≤—è–∑–∞—Ç—å—Å—è',
                    url=f'https://t.me/{callback.from_user.username}'
                )).add(
                InlineKeyboardButton(
                    '‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                    callback_data=f'answer{data["user"]}')))
        await bot.send_message(callback.from_user.id,
                               '–û—Ç–ø—Ä–∞–≤–∏–ª –≤–∞—à—É –±—Ä–æ–Ω—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n'
                               '–û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º',
                               reply_markup=InlineKeyboardMarkup().add(back_main)
                               )

        await state.finish()
    elif callback.data == "No":
        await bot.send_message(callback.from_user.id,
                               "–û—Ç–º–µ–Ω–∏–ª",
                               reply_markup=InlineKeyboardMarkup().add(back_main))
    await state.finish()
    await bot.answer_callback_query(callback.id)


async def confirm_table(callback: types.CallbackQuery):
    chat = callback.data[6::1]
    await bot.send_message(chat_id=chat,
                           text='–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ë—É–¥–µ–º –∂–¥–∞—Ç—å –í–∞—Å –≤ Loft',
                           reply_markup=InlineKeyboardMarkup().add(
                               back_main))
    await callback.message.edit_reply_markup(reply_markup=None)


async def cancel(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π"""
    await state.finish()
    await callback.answer(cache_time=3, show_alert=True, text='–û—Ç–º–µ–Ω–µ–Ω–æ')
    await callback.message.edit_text(text='–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É',
                                     reply_markup=InlineKeyboardMarkup().add(
                                         back_main))


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_message_other(dp: Dispatcher):
    dp.register_callback_query_handler(get_admin,
                                       text='get_admin')
    dp.register_callback_query_handler(question,
                                       text="have_question")
    dp.register_callback_query_handler(feedback,
                                       text='get_feedback',
                                       state=None)
    dp.register_message_handler(feedback_finish,
                                state=FSMfag.title)
    # dp.register_callback_query_handler(get_table_new, text='get_table')
    dp.register_callback_query_handler(get_table_start,
                                       text='get_table',
                                       state=None)
    dp.register_callback_query_handler(another_date,
                                       text='another_day',
                                       state=None)
    dp.register_callback_query_handler(get_date_cb,
                                       text='today',
                                       state='*')
    dp.register_message_handler(get_date,
                                state=FSMfag.date)
    dp.register_message_handler(table_per,
                                state=FSMfag.persons)
    dp.register_message_handler(get_time,
                                state=FSMfag.time)
    dp.register_callback_query_handler(table_finish,
                                       state=FSMfag.finish)
    dp.register_callback_query_handler(cancel,
                                       text='no',
                                       state="*")
    dp.register_callback_query_handler(confirm_table,
                                       Text(startswith='answer'))
